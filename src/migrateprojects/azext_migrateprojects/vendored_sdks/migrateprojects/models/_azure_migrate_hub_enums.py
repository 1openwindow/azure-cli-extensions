# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum

class MigrateProjectPropertiesRegisteredToolsItem(str, Enum):

    server_discovery = "ServerDiscovery"
    server_assessment = "ServerAssessment"
    server_migration = "ServerMigration"
    cloudamize = "Cloudamize"
    turbonomic = "Turbonomic"
    zerto = "Zerto"
    corent_tech = "CorentTech"
    server_assessment_v1 = "ServerAssessmentV1"
    server_migration_replication = "ServerMigration_Replication"
    carbonite = "Carbonite"
    data_migration_assistant = "DataMigrationAssistant"
    database_migration_service = "DatabaseMigrationService"

class SolutionPropertiesTool(str, Enum):
    """Gets or sets the tool being used in the solution.
    """

    server_discovery = "ServerDiscovery"
    server_assessment = "ServerAssessment"
    server_migration = "ServerMigration"
    cloudamize = "Cloudamize"
    turbonomic = "Turbonomic"
    zerto = "Zerto"
    corent_tech = "CorentTech"
    server_assessment_v1 = "ServerAssessmentV1"
    server_migration_replication = "ServerMigration_Replication"
    carbonite = "Carbonite"
    data_migration_assistant = "DataMigrationAssistant"
    database_migration_service = "DatabaseMigrationService"

class SolutionPropertiesPurpose(str, Enum):
    """Gets or sets the purpose of the solution.
    """

    discovery = "Discovery"
    assessment = "Assessment"
    migration = "Migration"

class SolutionPropertiesGoal(str, Enum):
    """Gets or sets the goal of the solution.
    """

    servers = "Servers"
    databases = "Databases"

class SolutionPropertiesStatus(str, Enum):
    """Gets or sets the current status of the solution.
    """

    inactive = "Inactive"
    active = "Active"

class SolutionPropertiesCleanupState(str, Enum):
    """Gets or sets the cleanup state of the solution.
    """

    none = "None"
    started = "Started"
    in_progress = "InProgress"
    completed = "Completed"
    failed = "Failed"

class IEdmSchemaElementKind(str, Enum):

    none = "None"
    type_definition = "TypeDefinition"
    term = "Term"
    action = "Action"
    entity_container = "EntityContainer"
    function = "Function"

class IEdmTypeKind(str, Enum):

    none = "None"
    primitive = "Primitive"
    entity = "Entity"
    complex = "Complex"
    collection = "Collection"
    entity_reference = "EntityReference"
    enum = "Enum"
    type_definition = "TypeDefinition"
    untyped = "Untyped"
    path = "Path"

class IEdmTermSchemaElementKind(str, Enum):

    none = "None"
    type_definition = "TypeDefinition"
    term = "Term"
    action = "Action"
    entity_container = "EntityContainer"
    function = "Function"

class IEdmExpressionKind(str, Enum):

    none = "None"
    binary_constant = "BinaryConstant"
    boolean_constant = "BooleanConstant"
    date_time_offset_constant = "DateTimeOffsetConstant"
    decimal_constant = "DecimalConstant"
    floating_constant = "FloatingConstant"
    guid_constant = "GuidConstant"
    integer_constant = "IntegerConstant"
    string_constant = "StringConstant"
    duration_constant = "DurationConstant"
    null = "Null"
    record = "Record"
    collection = "Collection"
    path = "Path"
    if_enum = "If"
    cast = "Cast"
    is_type = "IsType"
    function_application = "FunctionApplication"
    labeled_expression_reference = "LabeledExpressionReference"
    labeled = "Labeled"
    property_path = "PropertyPath"
    navigation_property_path = "NavigationPropertyPath"
    date_constant = "DateConstant"
    time_of_day_constant = "TimeOfDayConstant"
    enum_member = "EnumMember"
    annotation_path = "AnnotationPath"

class IEdmEntityContainerElementKind(str, Enum):

    none = "None"
    entity_set = "EntitySet"
    action_import = "ActionImport"
    function_import = "FunctionImport"
    singleton = "Singleton"

class IEdmEntityContainerSchemaElementKind(str, Enum):

    none = "None"
    type_definition = "TypeDefinition"
    term = "Term"
    action = "Action"
    entity_container = "EntityContainer"
    function = "Function"

class IEdmPropertyKind(str, Enum):

    none = "None"
    structural = "Structural"
    navigation = "Navigation"

class IEdmStructuredTypeKind(str, Enum):

    none = "None"
    primitive = "Primitive"
    entity = "Entity"
    complex = "Complex"
    collection = "Collection"
    entity_reference = "EntityReference"
    enum = "Enum"
    type_definition = "TypeDefinition"
    untyped = "Untyped"
    path = "Path"

class IEdmStructuralPropertyKind(str, Enum):

    none = "None"
    structural = "Structural"
    navigation = "Navigation"

class IEdmNavigationPropertyOnDelete(str, Enum):

    none = "None"
    cascade = "Cascade"

class IEdmNavigationPropertyKind(str, Enum):

    none = "None"
    structural = "Structural"
    navigation = "Navigation"

class IEdmPathExpressionKind(str, Enum):

    none = "None"
    binary_constant = "BinaryConstant"
    boolean_constant = "BooleanConstant"
    date_time_offset_constant = "DateTimeOffsetConstant"
    decimal_constant = "DecimalConstant"
    floating_constant = "FloatingConstant"
    guid_constant = "GuidConstant"
    integer_constant = "IntegerConstant"
    string_constant = "StringConstant"
    duration_constant = "DurationConstant"
    null = "Null"
    record = "Record"
    collection = "Collection"
    path = "Path"
    if_enum = "If"
    cast = "Cast"
    is_type = "IsType"
    function_application = "FunctionApplication"
    labeled_expression_reference = "LabeledExpressionReference"
    labeled = "Labeled"
    property_path = "PropertyPath"
    navigation_property_path = "NavigationPropertyPath"
    date_constant = "DateConstant"
    time_of_day_constant = "TimeOfDayConstant"
    enum_member = "EnumMember"
    annotation_path = "AnnotationPath"

class TransformationNodeKind(str, Enum):

    aggregate = "Aggregate"
    group_by = "GroupBy"
    filter = "Filter"
    compute = "Compute"

class ProjectSummaryRefreshSummaryState(str, Enum):
    """Gets or sets the state of refresh summary.
    """

    started = "Started"
    in_progress = "InProgress"
    completed = "Completed"
    failed = "Failed"

class MigrateProjectPropertiesRefreshSummaryState(str, Enum):
    """Gets the refresh summary state.
    """

    started = "Started"
    in_progress = "InProgress"
    completed = "Completed"
    failed = "Failed"

class ProvisioningState(str, Enum):
    """Provisioning state of the migrate project.
    """

    accepted = "Accepted"
    creating = "Creating"
    deleting = "Deleting"
    failed = "Failed"
    moving = "Moving"
    succeeded = "Succeeded"

class RegisterToolInputTool(str, Enum):
    """Gets or sets the tool to be registered.
    """

    server_discovery = "ServerDiscovery"
    server_assessment = "ServerAssessment"
    server_migration = "ServerMigration"
    cloudamize = "Cloudamize"
    turbonomic = "Turbonomic"
    zerto = "Zerto"
    corent_tech = "CorentTech"
    server_assessment_v1 = "ServerAssessmentV1"
    server_migration_replication = "ServerMigration_Replication"
    carbonite = "Carbonite"
    data_migration_assistant = "DataMigrationAssistant"
    database_migration_service = "DatabaseMigrationService"

class RefreshSummaryInputGoal(str, Enum):
    """Gets or sets the goal for which summary needs to be refreshed.
    """

    servers = "Servers"
    databases = "Databases"

class SingleValueNodeKind(str, Enum):

    none = "None"
    constant = "Constant"
    convert = "Convert"
    non_resource_range_variable_reference = "NonResourceRangeVariableReference"
    binary_operator = "BinaryOperator"
    unary_operator = "UnaryOperator"
    single_value_property_access = "SingleValuePropertyAccess"
    collection_property_access = "CollectionPropertyAccess"
    single_value_function_call = "SingleValueFunctionCall"
    any = "Any"
    collection_navigation_node = "CollectionNavigationNode"
    single_navigation_node = "SingleNavigationNode"
    single_value_open_property_access = "SingleValueOpenPropertyAccess"
    single_resource_cast = "SingleResourceCast"
    all = "All"
    collection_resource_cast = "CollectionResourceCast"
    resource_range_variable_reference = "ResourceRangeVariableReference"
    single_resource_function_call = "SingleResourceFunctionCall"
    collection_function_call = "CollectionFunctionCall"
    collection_resource_function_call = "CollectionResourceFunctionCall"
    named_function_parameter = "NamedFunctionParameter"
    parameter_alias = "ParameterAlias"
    entity_set = "EntitySet"
    key_lookup = "KeyLookup"
    search_term = "SearchTerm"
    collection_open_property_access = "CollectionOpenPropertyAccess"
    collection_complex_node = "CollectionComplexNode"
    single_complex_node = "SingleComplexNode"
    count = "Count"
    single_value_cast = "SingleValueCast"
    collection_property_node = "CollectionPropertyNode"
    aggregated_collection_property_node = "AggregatedCollectionPropertyNode"
    in_enum = "In"
    collection_constant = "CollectionConstant"
