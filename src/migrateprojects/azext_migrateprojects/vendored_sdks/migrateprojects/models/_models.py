# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import msrest.serialization


class ApplyClause(msrest.serialization.Model):
    """ApplyClause.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar transformations:
    :vartype transformations: list[~azure_migrate_hub.models.TransformationNode]
    """

    _validation = {
        'transformations': {'readonly': True},
    }

    _attribute_map = {
        'transformations': {'key': 'transformations', 'type': '[TransformationNode]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ApplyClause, self).__init__(**kwargs)
        self.transformations = None


class AssessmentDetails(msrest.serialization.Model):
    """Assessment properties that can be shared by various publishers.

    :param assessment_id: Gets or sets the id of the assessment done on the machine.
    :type assessment_id: str
    :param target_vm_size: Gets or sets the target VM size.
    :type target_vm_size: str
    :param target_vm_location: Gets or sets the target VM location.
    :type target_vm_location: str
    :param target_storage_type: Gets or sets the target storage type.
    :type target_storage_type: dict[str, str]
    :param enqueue_time: Gets or sets the time the message was enqueued.
    :type enqueue_time: str
    :param solution_name: Gets or sets the name of the solution that sent the data.
    :type solution_name: str
    :param machine_id: Gets or sets the unique identifier of the machine.
    :type machine_id: str
    :param machine_manager_id: Gets or sets the unique identifier of the virtual machine
     manager(vCenter/VMM).
    :type machine_manager_id: str
    :param fabric_type: Gets or sets the fabric type.
    :type fabric_type: str
    :param last_updated_time: Gets or sets the time of the last modification of the machine
     details.
    :type last_updated_time: ~datetime.datetime
    :param machine_name: Gets or sets the name of the machine.
    :type machine_name: str
    :param ip_addresses: Gets or sets the list of IP addresses of the machine. IP addresses could
     be IP V4 or IP V6.
    :type ip_addresses: list[str]
    :param fqdn: Gets or sets the FQDN of the machine.
    :type fqdn: str
    :param bios_id: Gets or sets the BIOS ID of the machine.
    :type bios_id: str
    :param mac_addresses: Gets or sets the list of MAC addresses of the machine.
    :type mac_addresses: list[str]
    :param extended_info: Gets or sets the ISV specific extended information.
    :type extended_info: dict[str, str]
    """

    _attribute_map = {
        'assessment_id': {'key': 'assessmentId', 'type': 'str'},
        'target_vm_size': {'key': 'targetVMSize', 'type': 'str'},
        'target_vm_location': {'key': 'targetVMLocation', 'type': 'str'},
        'target_storage_type': {'key': 'targetStorageType', 'type': '{str}'},
        'enqueue_time': {'key': 'enqueueTime', 'type': 'str'},
        'solution_name': {'key': 'solutionName', 'type': 'str'},
        'machine_id': {'key': 'machineId', 'type': 'str'},
        'machine_manager_id': {'key': 'machineManagerId', 'type': 'str'},
        'fabric_type': {'key': 'fabricType', 'type': 'str'},
        'last_updated_time': {'key': 'lastUpdatedTime', 'type': 'iso-8601'},
        'machine_name': {'key': 'machineName', 'type': 'str'},
        'ip_addresses': {'key': 'ipAddresses', 'type': '[str]'},
        'fqdn': {'key': 'fqdn', 'type': 'str'},
        'bios_id': {'key': 'biosId', 'type': 'str'},
        'mac_addresses': {'key': 'macAddresses', 'type': '[str]'},
        'extended_info': {'key': 'extendedInfo', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(AssessmentDetails, self).__init__(**kwargs)
        self.assessment_id = kwargs.get('assessment_id', None)
        self.target_vm_size = kwargs.get('target_vm_size', None)
        self.target_vm_location = kwargs.get('target_vm_location', None)
        self.target_storage_type = kwargs.get('target_storage_type', None)
        self.enqueue_time = kwargs.get('enqueue_time', None)
        self.solution_name = kwargs.get('solution_name', None)
        self.machine_id = kwargs.get('machine_id', None)
        self.machine_manager_id = kwargs.get('machine_manager_id', None)
        self.fabric_type = kwargs.get('fabric_type', None)
        self.last_updated_time = kwargs.get('last_updated_time', None)
        self.machine_name = kwargs.get('machine_name', None)
        self.ip_addresses = kwargs.get('ip_addresses', None)
        self.fqdn = kwargs.get('fqdn', None)
        self.bios_id = kwargs.get('bios_id', None)
        self.mac_addresses = kwargs.get('mac_addresses', None)
        self.extended_info = kwargs.get('extended_info', None)


class Database(msrest.serialization.Model):
    """Database REST resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Gets or sets the relative URL to get to this REST resource.
    :type id: str
    :param name: Gets or sets the name of this REST resource.
    :type name: str
    :ivar type: Gets the type of this REST resource.
    :vartype type: str
    :param properties: Gets or sets the properties of the database.
    :type properties: ~azure_migrate_hub.models.DatabaseProperties
    """

    _validation = {
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'DatabaseProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Database, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.type = None
        self.properties = kwargs.get('properties', None)


class DatabaseAssessmentDetails(msrest.serialization.Model):
    """Assessment properties that can be shared by various publishers.

    :param assessment_id: Gets or sets the database assessment scope/Id.
    :type assessment_id: str
    :param migration_blockers_count: Gets or sets the number of blocking changes found.
    :type migration_blockers_count: int
    :param breaking_changes_count: Gets or sets the number of breaking changes found.
    :type breaking_changes_count: int
    :param is_ready_for_migration: Gets or sets a value indicating whether the database is ready
     for migration.
    :type is_ready_for_migration: bool
    :param assessment_target_type: Gets or sets the assessed target database type.
    :type assessment_target_type: str
    :param last_assessed_time: Gets or sets the time when the database was last assessed.
    :type last_assessed_time: ~datetime.datetime
    :param compatibility_level: Gets or sets the compatibility level of the database.
    :type compatibility_level: str
    :param database_size_in_mb: Gets or sets the database size.
    :type database_size_in_mb: str
    :param last_updated_time: Gets or sets the time of the last modification of the database
     details.
    :type last_updated_time: ~datetime.datetime
    :param enqueue_time: Gets or sets the time the message was enqueued.
    :type enqueue_time: str
    :param solution_name: Gets or sets the name of the solution that sent the data.
    :type solution_name: str
    :param instance_id: Gets or sets the database server instance Id.
    :type instance_id: str
    :param database_name: Gets or sets the database name.
    :type database_name: str
    :param extended_info: Gets or sets the extended properties of the database.
    :type extended_info: dict[str, str]
    """

    _attribute_map = {
        'assessment_id': {'key': 'assessmentId', 'type': 'str'},
        'migration_blockers_count': {'key': 'migrationBlockersCount', 'type': 'int'},
        'breaking_changes_count': {'key': 'breakingChangesCount', 'type': 'int'},
        'is_ready_for_migration': {'key': 'isReadyForMigration', 'type': 'bool'},
        'assessment_target_type': {'key': 'assessmentTargetType', 'type': 'str'},
        'last_assessed_time': {'key': 'lastAssessedTime', 'type': 'iso-8601'},
        'compatibility_level': {'key': 'compatibilityLevel', 'type': 'str'},
        'database_size_in_mb': {'key': 'databaseSizeInMB', 'type': 'str'},
        'last_updated_time': {'key': 'lastUpdatedTime', 'type': 'iso-8601'},
        'enqueue_time': {'key': 'enqueueTime', 'type': 'str'},
        'solution_name': {'key': 'solutionName', 'type': 'str'},
        'instance_id': {'key': 'instanceId', 'type': 'str'},
        'database_name': {'key': 'databaseName', 'type': 'str'},
        'extended_info': {'key': 'extendedInfo', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DatabaseAssessmentDetails, self).__init__(**kwargs)
        self.assessment_id = kwargs.get('assessment_id', None)
        self.migration_blockers_count = kwargs.get('migration_blockers_count', None)
        self.breaking_changes_count = kwargs.get('breaking_changes_count', None)
        self.is_ready_for_migration = kwargs.get('is_ready_for_migration', None)
        self.assessment_target_type = kwargs.get('assessment_target_type', None)
        self.last_assessed_time = kwargs.get('last_assessed_time', None)
        self.compatibility_level = kwargs.get('compatibility_level', None)
        self.database_size_in_mb = kwargs.get('database_size_in_mb', None)
        self.last_updated_time = kwargs.get('last_updated_time', None)
        self.enqueue_time = kwargs.get('enqueue_time', None)
        self.solution_name = kwargs.get('solution_name', None)
        self.instance_id = kwargs.get('instance_id', None)
        self.database_name = kwargs.get('database_name', None)
        self.extended_info = kwargs.get('extended_info', None)


class DatabaseCollection(msrest.serialization.Model):
    """Collection of databases.

    :param value: Gets or sets the databases.
    :type value: list[~azure_migrate_hub.models.Database]
    :param next_link: Gets or sets the value of nextLink.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Database]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DatabaseCollection, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class DatabaseInstance(msrest.serialization.Model):
    """DatabaseInstance REST resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Gets or sets the relative URL to get to this REST resource.
    :type id: str
    :param name: Gets or sets the name of this REST resource.
    :type name: str
    :ivar type: Gets the type of this REST resource.
    :vartype type: str
    :param properties: Gets or sets the properties of the machine.
    :type properties: ~azure_migrate_hub.models.DatabaseInstanceProperties
    """

    _validation = {
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'DatabaseInstanceProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DatabaseInstance, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.type = None
        self.properties = kwargs.get('properties', None)


class DatabaseInstanceCollection(msrest.serialization.Model):
    """Collection of database instances.

    :param value: Gets or sets the database instances.
    :type value: list[~azure_migrate_hub.models.DatabaseInstance]
    :param next_link: Gets or sets the value of nextLink.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DatabaseInstance]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DatabaseInstanceCollection, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class DatabaseInstanceDiscoveryDetails(msrest.serialization.Model):
    """Discovery properties that can be shared by various publishers.

    :param last_updated_time: Gets or sets the time of the last modification of the database
     instance details.
    :type last_updated_time: ~datetime.datetime
    :param instance_id: Gets or sets the database instance Id.
    :type instance_id: str
    :param enqueue_time: Gets or sets the time the message was enqueued.
    :type enqueue_time: str
    :param solution_name: Gets or sets the name of the solution that sent the data.
    :type solution_name: str
    :param instance_name: Gets or sets the database instance name.
    :type instance_name: str
    :param instance_version: Gets or sets the database instance version.
    :type instance_version: str
    :param instance_type: Gets or sets the database instance type.
    :type instance_type: str
    :param host_name: Gets or sets the host name of the database server.
    :type host_name: str
    :param ip_address: Gets or sets the IP addresses of the database server. IP addresses could be
     IP V4 or IP V6.
    :type ip_address: str
    :param port_number: Gets or sets the port number of the database server.
    :type port_number: int
    :param extended_info: Gets or sets the extended properties of the database server.
    :type extended_info: dict[str, str]
    """

    _attribute_map = {
        'last_updated_time': {'key': 'lastUpdatedTime', 'type': 'iso-8601'},
        'instance_id': {'key': 'instanceId', 'type': 'str'},
        'enqueue_time': {'key': 'enqueueTime', 'type': 'str'},
        'solution_name': {'key': 'solutionName', 'type': 'str'},
        'instance_name': {'key': 'instanceName', 'type': 'str'},
        'instance_version': {'key': 'instanceVersion', 'type': 'str'},
        'instance_type': {'key': 'instanceType', 'type': 'str'},
        'host_name': {'key': 'hostName', 'type': 'str'},
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
        'port_number': {'key': 'portNumber', 'type': 'int'},
        'extended_info': {'key': 'extendedInfo', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DatabaseInstanceDiscoveryDetails, self).__init__(**kwargs)
        self.last_updated_time = kwargs.get('last_updated_time', None)
        self.instance_id = kwargs.get('instance_id', None)
        self.enqueue_time = kwargs.get('enqueue_time', None)
        self.solution_name = kwargs.get('solution_name', None)
        self.instance_name = kwargs.get('instance_name', None)
        self.instance_version = kwargs.get('instance_version', None)
        self.instance_type = kwargs.get('instance_type', None)
        self.host_name = kwargs.get('host_name', None)
        self.ip_address = kwargs.get('ip_address', None)
        self.port_number = kwargs.get('port_number', None)
        self.extended_info = kwargs.get('extended_info', None)


class DatabaseInstanceProperties(msrest.serialization.Model):
    """Properties of the database instance resource.

    :param discovery_data: Gets or sets the assessment details of the database instance published
     by various sources.
    :type discovery_data: list[~azure_migrate_hub.models.DatabaseInstanceDiscoveryDetails]
    :param summary: Gets or sets the database instances summary per solution. The key of dictionary
     is the solution name and value is the corresponding database instance summary object.
    :type summary: dict[str, ~azure_migrate_hub.models.DatabaseInstanceSummary]
    :param last_updated_time: Gets or sets the time of the last modification of the database.
    :type last_updated_time: ~datetime.datetime
    """

    _attribute_map = {
        'discovery_data': {'key': 'discoveryData', 'type': '[DatabaseInstanceDiscoveryDetails]'},
        'summary': {'key': 'summary', 'type': '{DatabaseInstanceSummary}'},
        'last_updated_time': {'key': 'lastUpdatedTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DatabaseInstanceProperties, self).__init__(**kwargs)
        self.discovery_data = kwargs.get('discovery_data', None)
        self.summary = kwargs.get('summary', None)
        self.last_updated_time = kwargs.get('last_updated_time', None)


class DatabaseInstanceSummary(msrest.serialization.Model):
    """Class representing the database instance summary object.

    :param databases_assessed_count: Gets or sets the count of databases assessed.
    :type databases_assessed_count: int
    :param migration_ready_count: Gets or sets the count of databases ready for migration.
    :type migration_ready_count: int
    """

    _attribute_map = {
        'databases_assessed_count': {'key': 'databasesAssessedCount', 'type': 'int'},
        'migration_ready_count': {'key': 'migrationReadyCount', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DatabaseInstanceSummary, self).__init__(**kwargs)
        self.databases_assessed_count = kwargs.get('databases_assessed_count', None)
        self.migration_ready_count = kwargs.get('migration_ready_count', None)


class MigrateEventProperties(msrest.serialization.Model):
    """Properties of the error resource.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: DatabaseMigrateEventProperties, MachineMigrateEventProperties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar instance_type: Gets the Instance type.Constant filled by server.
    :vartype instance_type: str
    :param error_code: Gets or sets the error code.
    :type error_code: str
    :param error_message: Gets or sets the error message.
    :type error_message: str
    :param recommendation: Gets or sets the recommendation for the error.
    :type recommendation: str
    :param possible_causes: Gets or sets the possible causes for the error.
    :type possible_causes: str
    :param solution: Gets or sets the solution for which the error is being reported.
    :type solution: str
    :param client_request_id: Gets or sets the client request Id of the payload for which the event
     is being reported.
    :type client_request_id: str
    """

    _validation = {
        'instance_type': {'readonly': True},
    }

    _attribute_map = {
        'instance_type': {'key': 'instanceType', 'type': 'str'},
        'error_code': {'key': 'errorCode', 'type': 'str'},
        'error_message': {'key': 'errorMessage', 'type': 'str'},
        'recommendation': {'key': 'recommendation', 'type': 'str'},
        'possible_causes': {'key': 'possibleCauses', 'type': 'str'},
        'solution': {'key': 'solution', 'type': 'str'},
        'client_request_id': {'key': 'clientRequestId', 'type': 'str'},
    }

    _subtype_map = {
        'instance_type': {'Databases': 'DatabaseMigrateEventProperties', 'Servers': 'MachineMigrateEventProperties'}
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MigrateEventProperties, self).__init__(**kwargs)
        self.instance_type = None
        self.error_code = kwargs.get('error_code', None)
        self.error_message = kwargs.get('error_message', None)
        self.recommendation = kwargs.get('recommendation', None)
        self.possible_causes = kwargs.get('possible_causes', None)
        self.solution = kwargs.get('solution', None)
        self.client_request_id = kwargs.get('client_request_id', None)


class DatabaseMigrateEventProperties(MigrateEventProperties):
    """Properties of the database error resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar instance_type: Gets the Instance type.Constant filled by server.
    :vartype instance_type: str
    :param error_code: Gets or sets the error code.
    :type error_code: str
    :param error_message: Gets or sets the error message.
    :type error_message: str
    :param recommendation: Gets or sets the recommendation for the error.
    :type recommendation: str
    :param possible_causes: Gets or sets the possible causes for the error.
    :type possible_causes: str
    :param solution: Gets or sets the solution for which the error is being reported.
    :type solution: str
    :param client_request_id: Gets or sets the client request Id of the payload for which the event
     is being reported.
    :type client_request_id: str
    :param database: Gets or sets the database for which the error is being reported.
    :type database: str
    :param database_instance_id: Gets or sets the database instance for which the error is being
     reported.
    :type database_instance_id: str
    """

    _validation = {
        'instance_type': {'readonly': True},
    }

    _attribute_map = {
        'instance_type': {'key': 'instanceType', 'type': 'str'},
        'error_code': {'key': 'errorCode', 'type': 'str'},
        'error_message': {'key': 'errorMessage', 'type': 'str'},
        'recommendation': {'key': 'recommendation', 'type': 'str'},
        'possible_causes': {'key': 'possibleCauses', 'type': 'str'},
        'solution': {'key': 'solution', 'type': 'str'},
        'client_request_id': {'key': 'clientRequestId', 'type': 'str'},
        'database': {'key': 'database', 'type': 'str'},
        'database_instance_id': {'key': 'databaseInstanceId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DatabaseMigrateEventProperties, self).__init__(**kwargs)
        self.instance_type = None
        self.database = kwargs.get('database', None)
        self.database_instance_id = kwargs.get('database_instance_id', None)


class ProjectSummary(msrest.serialization.Model):
    """The project summary class.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: DatabaseProjectSummary, ServersProjectSummary.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar instance_type: Gets the Instance type.Constant filled by server.
    :vartype instance_type: str
    :param refresh_summary_state: Gets or sets the state of refresh summary. Possible values
     include: 'Started', 'InProgress', 'Completed', 'Failed'.
    :type refresh_summary_state: str or ~azure_migrate_hub.models.ProjectSummaryRefreshSummaryState
    :param last_summary_refreshed_time: Gets or sets the time when summary was last refreshed.
    :type last_summary_refreshed_time: ~datetime.datetime
    :param extended_summary: Gets or sets the extended summary.
    :type extended_summary: dict[str, str]
    """

    _validation = {
        'instance_type': {'readonly': True},
    }

    _attribute_map = {
        'instance_type': {'key': 'instanceType', 'type': 'str'},
        'refresh_summary_state': {'key': 'refreshSummaryState', 'type': 'str'},
        'last_summary_refreshed_time': {'key': 'lastSummaryRefreshedTime', 'type': 'iso-8601'},
        'extended_summary': {'key': 'extendedSummary', 'type': '{str}'},
    }

    _subtype_map = {
        'instance_type': {'Databases': 'DatabaseProjectSummary', 'Servers': 'ServersProjectSummary'}
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProjectSummary, self).__init__(**kwargs)
        self.instance_type = None
        self.refresh_summary_state = kwargs.get('refresh_summary_state', None)
        self.last_summary_refreshed_time = kwargs.get('last_summary_refreshed_time', None)
        self.extended_summary = kwargs.get('extended_summary', None)


class DatabaseProjectSummary(ProjectSummary):
    """The database project summary class.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar instance_type: Gets the Instance type.Constant filled by server.
    :vartype instance_type: str
    :param refresh_summary_state: Gets or sets the state of refresh summary. Possible values
     include: 'Started', 'InProgress', 'Completed', 'Failed'.
    :type refresh_summary_state: str or ~azure_migrate_hub.models.ProjectSummaryRefreshSummaryState
    :param last_summary_refreshed_time: Gets or sets the time when summary was last refreshed.
    :type last_summary_refreshed_time: ~datetime.datetime
    :param extended_summary: Gets or sets the extended summary.
    :type extended_summary: dict[str, str]
    """

    _validation = {
        'instance_type': {'readonly': True},
    }

    _attribute_map = {
        'instance_type': {'key': 'instanceType', 'type': 'str'},
        'refresh_summary_state': {'key': 'refreshSummaryState', 'type': 'str'},
        'last_summary_refreshed_time': {'key': 'lastSummaryRefreshedTime', 'type': 'iso-8601'},
        'extended_summary': {'key': 'extendedSummary', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DatabaseProjectSummary, self).__init__(**kwargs)
        self.instance_type = None


class DatabaseProperties(msrest.serialization.Model):
    """Properties of the database resource.

    :param assessment_data: Gets or sets the assessment details of the database published by
     various sources.
    :type assessment_data: list[~azure_migrate_hub.models.DatabaseAssessmentDetails]
    :param last_updated_time: Gets or sets the time of the last modification of the database.
    :type last_updated_time: ~datetime.datetime
    """

    _attribute_map = {
        'assessment_data': {'key': 'assessmentData', 'type': '[DatabaseAssessmentDetails]'},
        'last_updated_time': {'key': 'lastUpdatedTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DatabaseProperties, self).__init__(**kwargs)
        self.assessment_data = kwargs.get('assessment_data', None)
        self.last_updated_time = kwargs.get('last_updated_time', None)


class SolutionSummary(msrest.serialization.Model):
    """The solution summary class.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: DatabasesSolutionSummary, ServersSolutionSummary.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar instance_type: Gets the Instance type.Constant filled by server.
    :vartype instance_type: str
    """

    _validation = {
        'instance_type': {'readonly': True},
    }

    _attribute_map = {
        'instance_type': {'key': 'instanceType', 'type': 'str'},
    }

    _subtype_map = {
        'instance_type': {'Databases': 'DatabasesSolutionSummary', 'Servers': 'ServersSolutionSummary'}
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SolutionSummary, self).__init__(**kwargs)
        self.instance_type = None


class DatabasesSolutionSummary(SolutionSummary):
    """Class representing the databases solution summary.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar instance_type: Gets the Instance type.Constant filled by server.
    :vartype instance_type: str
    :param databases_assessed_count: Gets or sets the count of databases assessed.
    :type databases_assessed_count: int
    :param database_instances_assessed_count: Gets or sets the count of database instances
     assessed.
    :type database_instances_assessed_count: int
    :param migration_ready_count: Gets or sets the count of databases ready for migration.
    :type migration_ready_count: int
    """

    _validation = {
        'instance_type': {'readonly': True},
    }

    _attribute_map = {
        'instance_type': {'key': 'instanceType', 'type': 'str'},
        'databases_assessed_count': {'key': 'databasesAssessedCount', 'type': 'int'},
        'database_instances_assessed_count': {'key': 'databaseInstancesAssessedCount', 'type': 'int'},
        'migration_ready_count': {'key': 'migrationReadyCount', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DatabasesSolutionSummary, self).__init__(**kwargs)
        self.instance_type = None
        self.databases_assessed_count = kwargs.get('databases_assessed_count', None)
        self.database_instances_assessed_count = kwargs.get('database_instances_assessed_count', None)
        self.migration_ready_count = kwargs.get('migration_ready_count', None)


class DefaultQuerySettings(msrest.serialization.Model):
    """DefaultQuerySettings.

    :param enable_expand:
    :type enable_expand: bool
    :param enable_select:
    :type enable_select: bool
    :param enable_count:
    :type enable_count: bool
    :param enable_order_by:
    :type enable_order_by: bool
    :param enable_filter:
    :type enable_filter: bool
    :param max_top:
    :type max_top: int
    """

    _attribute_map = {
        'enable_expand': {'key': 'enableExpand', 'type': 'bool'},
        'enable_select': {'key': 'enableSelect', 'type': 'bool'},
        'enable_count': {'key': 'enableCount', 'type': 'bool'},
        'enable_order_by': {'key': 'enableOrderBy', 'type': 'bool'},
        'enable_filter': {'key': 'enableFilter', 'type': 'bool'},
        'max_top': {'key': 'maxTop', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DefaultQuerySettings, self).__init__(**kwargs)
        self.enable_expand = kwargs.get('enable_expand', None)
        self.enable_select = kwargs.get('enable_select', None)
        self.enable_count = kwargs.get('enable_count', None)
        self.enable_order_by = kwargs.get('enable_order_by', None)
        self.enable_filter = kwargs.get('enable_filter', None)
        self.max_top = kwargs.get('max_top', None)


class DiscoveryDetails(msrest.serialization.Model):
    """Discovery properties that can be published by various ISVs.

    :param os_type: Gets or sets the OS type.
    :type os_type: str
    :param os_name: Gets or sets the OS name.
    :type os_name: str
    :param os_version: Gets or sets the OS version.
    :type os_version: str
    :param enqueue_time: Gets or sets the time the message was enqueued.
    :type enqueue_time: str
    :param solution_name: Gets or sets the name of the solution that sent the data.
    :type solution_name: str
    :param machine_id: Gets or sets the unique identifier of the machine.
    :type machine_id: str
    :param machine_manager_id: Gets or sets the unique identifier of the virtual machine
     manager(vCenter/VMM).
    :type machine_manager_id: str
    :param fabric_type: Gets or sets the fabric type.
    :type fabric_type: str
    :param last_updated_time: Gets or sets the time of the last modification of the machine
     details.
    :type last_updated_time: ~datetime.datetime
    :param machine_name: Gets or sets the name of the machine.
    :type machine_name: str
    :param ip_addresses: Gets or sets the list of IP addresses of the machine. IP addresses could
     be IP V4 or IP V6.
    :type ip_addresses: list[str]
    :param fqdn: Gets or sets the FQDN of the machine.
    :type fqdn: str
    :param bios_id: Gets or sets the BIOS ID of the machine.
    :type bios_id: str
    :param mac_addresses: Gets or sets the list of MAC addresses of the machine.
    :type mac_addresses: list[str]
    :param extended_info: Gets or sets the ISV specific extended information.
    :type extended_info: dict[str, str]
    """

    _attribute_map = {
        'os_type': {'key': 'osType', 'type': 'str'},
        'os_name': {'key': 'osName', 'type': 'str'},
        'os_version': {'key': 'osVersion', 'type': 'str'},
        'enqueue_time': {'key': 'enqueueTime', 'type': 'str'},
        'solution_name': {'key': 'solutionName', 'type': 'str'},
        'machine_id': {'key': 'machineId', 'type': 'str'},
        'machine_manager_id': {'key': 'machineManagerId', 'type': 'str'},
        'fabric_type': {'key': 'fabricType', 'type': 'str'},
        'last_updated_time': {'key': 'lastUpdatedTime', 'type': 'iso-8601'},
        'machine_name': {'key': 'machineName', 'type': 'str'},
        'ip_addresses': {'key': 'ipAddresses', 'type': '[str]'},
        'fqdn': {'key': 'fqdn', 'type': 'str'},
        'bios_id': {'key': 'biosId', 'type': 'str'},
        'mac_addresses': {'key': 'macAddresses', 'type': '[str]'},
        'extended_info': {'key': 'extendedInfo', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DiscoveryDetails, self).__init__(**kwargs)
        self.os_type = kwargs.get('os_type', None)
        self.os_name = kwargs.get('os_name', None)
        self.os_version = kwargs.get('os_version', None)
        self.enqueue_time = kwargs.get('enqueue_time', None)
        self.solution_name = kwargs.get('solution_name', None)
        self.machine_id = kwargs.get('machine_id', None)
        self.machine_manager_id = kwargs.get('machine_manager_id', None)
        self.fabric_type = kwargs.get('fabric_type', None)
        self.last_updated_time = kwargs.get('last_updated_time', None)
        self.machine_name = kwargs.get('machine_name', None)
        self.ip_addresses = kwargs.get('ip_addresses', None)
        self.fqdn = kwargs.get('fqdn', None)
        self.bios_id = kwargs.get('bios_id', None)
        self.mac_addresses = kwargs.get('mac_addresses', None)
        self.extended_info = kwargs.get('extended_info', None)


class EdmReferentialConstraintPropertyPair(msrest.serialization.Model):
    """EdmReferentialConstraintPropertyPair.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar dependent_property:
    :vartype dependent_property: ~azure_migrate_hub.models.IEdmStructuralProperty
    :ivar principal_property:
    :vartype principal_property: ~azure_migrate_hub.models.IEdmStructuralProperty
    """

    _validation = {
        'dependent_property': {'readonly': True},
        'principal_property': {'readonly': True},
    }

    _attribute_map = {
        'dependent_property': {'key': 'dependentProperty', 'type': 'IEdmStructuralProperty'},
        'principal_property': {'key': 'principalProperty', 'type': 'IEdmStructuralProperty'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(EdmReferentialConstraintPropertyPair, self).__init__(**kwargs)
        self.dependent_property = None
        self.principal_property = None


class EventCollection(msrest.serialization.Model):
    """Collection of events.

    :param value: Gets or sets the machines.
    :type value: list[~azure_migrate_hub.models.MigrateEvent]
    :param next_link: Gets or sets the value of nextLink.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MigrateEvent]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(EventCollection, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class FilterClause(msrest.serialization.Model):
    """FilterClause.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar expression:
    :vartype expression: ~azure_migrate_hub.models.SingleValueNode
    :ivar range_variable:
    :vartype range_variable: ~azure_migrate_hub.models.RangeVariable
    :ivar item_type:
    :vartype item_type: ~azure_migrate_hub.models.IEdmTypeReference
    """

    _validation = {
        'expression': {'readonly': True},
        'range_variable': {'readonly': True},
        'item_type': {'readonly': True},
    }

    _attribute_map = {
        'expression': {'key': 'expression', 'type': 'SingleValueNode'},
        'range_variable': {'key': 'rangeVariable', 'type': 'RangeVariable'},
        'item_type': {'key': 'itemType', 'type': 'IEdmTypeReference'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(FilterClause, self).__init__(**kwargs)
        self.expression = None
        self.range_variable = None
        self.item_type = None


class FilterQueryOption(msrest.serialization.Model):
    """FilterQueryOption.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar context:
    :vartype context: ~azure_migrate_hub.models.ODataQueryContext
    :param validator: Any object.
    :type validator: object
    :ivar filter_clause:
    :vartype filter_clause: ~azure_migrate_hub.models.FilterClause
    :ivar raw_value:
    :vartype raw_value: str
    """

    _validation = {
        'context': {'readonly': True},
        'filter_clause': {'readonly': True},
        'raw_value': {'readonly': True},
    }

    _attribute_map = {
        'context': {'key': 'context', 'type': 'ODataQueryContext'},
        'validator': {'key': 'validator', 'type': 'object'},
        'filter_clause': {'key': 'filterClause', 'type': 'FilterClause'},
        'raw_value': {'key': 'rawValue', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(FilterQueryOption, self).__init__(**kwargs)
        self.context = None
        self.validator = kwargs.get('validator', None)
        self.filter_clause = None
        self.raw_value = None


class IEdmEntityContainer(msrest.serialization.Model):
    """IEdmEntityContainer.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar elements:
    :vartype elements: list[~azure_migrate_hub.models.IEdmEntityContainerElement]
    :ivar schema_element_kind:  Possible values include: 'None', 'TypeDefinition', 'Term',
     'Action', 'EntityContainer', 'Function'.
    :vartype schema_element_kind: str or
     ~azure_migrate_hub.models.IEdmEntityContainerSchemaElementKind
    :ivar namespace:
    :vartype namespace: str
    :ivar name:
    :vartype name: str
    """

    _validation = {
        'elements': {'readonly': True},
        'schema_element_kind': {'readonly': True},
        'namespace': {'readonly': True},
        'name': {'readonly': True},
    }

    _attribute_map = {
        'elements': {'key': 'elements', 'type': '[IEdmEntityContainerElement]'},
        'schema_element_kind': {'key': 'schemaElementKind', 'type': 'str'},
        'namespace': {'key': 'namespace', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(IEdmEntityContainer, self).__init__(**kwargs)
        self.elements = None
        self.schema_element_kind = None
        self.namespace = None
        self.name = None


class IEdmEntityContainerElement(msrest.serialization.Model):
    """IEdmEntityContainerElement.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar container_element_kind:  Possible values include: 'None', 'EntitySet', 'ActionImport',
     'FunctionImport', 'Singleton'.
    :vartype container_element_kind: str or
     ~azure_migrate_hub.models.IEdmEntityContainerElementKind
    :ivar container:
    :vartype container: ~azure_migrate_hub.models.IEdmEntityContainer
    :ivar name:
    :vartype name: str
    """

    _validation = {
        'container_element_kind': {'readonly': True},
        'container': {'readonly': True},
        'name': {'readonly': True},
    }

    _attribute_map = {
        'container_element_kind': {'key': 'containerElementKind', 'type': 'str'},
        'container': {'key': 'container', 'type': 'IEdmEntityContainer'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(IEdmEntityContainerElement, self).__init__(**kwargs)
        self.container_element_kind = None
        self.container = None
        self.name = None


class IEdmExpression(msrest.serialization.Model):
    """IEdmExpression.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar expression_kind:  Possible values include: 'None', 'BinaryConstant', 'BooleanConstant',
     'DateTimeOffsetConstant', 'DecimalConstant', 'FloatingConstant', 'GuidConstant',
     'IntegerConstant', 'StringConstant', 'DurationConstant', 'Null', 'Record', 'Collection',
     'Path', 'If', 'Cast', 'IsType', 'FunctionApplication', 'LabeledExpressionReference', 'Labeled',
     'PropertyPath', 'NavigationPropertyPath', 'DateConstant', 'TimeOfDayConstant', 'EnumMember',
     'AnnotationPath'.
    :vartype expression_kind: str or ~azure_migrate_hub.models.IEdmExpressionKind
    """

    _validation = {
        'expression_kind': {'readonly': True},
    }

    _attribute_map = {
        'expression_kind': {'key': 'expressionKind', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(IEdmExpression, self).__init__(**kwargs)
        self.expression_kind = None


class IEdmModel(msrest.serialization.Model):
    """IEdmModel.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar schema_elements:
    :vartype schema_elements: list[~azure_migrate_hub.models.IEdmSchemaElement]
    :ivar vocabulary_annotations:
    :vartype vocabulary_annotations: list[~azure_migrate_hub.models.IEdmVocabularyAnnotation]
    :ivar referenced_models:
    :vartype referenced_models: list[~azure_migrate_hub.models.IEdmModel]
    :ivar declared_namespaces:
    :vartype declared_namespaces: list[str]
    :ivar direct_value_annotations_manager: Any object.
    :vartype direct_value_annotations_manager: object
    :ivar entity_container:
    :vartype entity_container: ~azure_migrate_hub.models.IEdmEntityContainer
    """

    _validation = {
        'schema_elements': {'readonly': True},
        'vocabulary_annotations': {'readonly': True},
        'referenced_models': {'readonly': True},
        'declared_namespaces': {'readonly': True},
        'direct_value_annotations_manager': {'readonly': True},
        'entity_container': {'readonly': True},
    }

    _attribute_map = {
        'schema_elements': {'key': 'schemaElements', 'type': '[IEdmSchemaElement]'},
        'vocabulary_annotations': {'key': 'vocabularyAnnotations', 'type': '[IEdmVocabularyAnnotation]'},
        'referenced_models': {'key': 'referencedModels', 'type': '[IEdmModel]'},
        'declared_namespaces': {'key': 'declaredNamespaces', 'type': '[str]'},
        'direct_value_annotations_manager': {'key': 'directValueAnnotationsManager', 'type': 'object'},
        'entity_container': {'key': 'entityContainer', 'type': 'IEdmEntityContainer'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(IEdmModel, self).__init__(**kwargs)
        self.schema_elements = None
        self.vocabulary_annotations = None
        self.referenced_models = None
        self.declared_namespaces = None
        self.direct_value_annotations_manager = None
        self.entity_container = None


class IEdmNavigationProperty(msrest.serialization.Model):
    """IEdmNavigationProperty.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar partner:
    :vartype partner: ~azure_migrate_hub.models.IEdmNavigationProperty
    :ivar on_delete:  Possible values include: 'None', 'Cascade'.
    :vartype on_delete: str or ~azure_migrate_hub.models.IEdmNavigationPropertyOnDelete
    :ivar contains_target:
    :vartype contains_target: bool
    :ivar referential_constraint:
    :vartype referential_constraint: ~azure_migrate_hub.models.IEdmReferentialConstraint
    :ivar property_kind:  Possible values include: 'None', 'Structural', 'Navigation'.
    :vartype property_kind: str or ~azure_migrate_hub.models.IEdmNavigationPropertyKind
    :ivar type:
    :vartype type: ~azure_migrate_hub.models.IEdmTypeReference
    :ivar declaring_type:
    :vartype declaring_type: ~azure_migrate_hub.models.IEdmStructuredType
    :ivar name:
    :vartype name: str
    """

    _validation = {
        'partner': {'readonly': True},
        'on_delete': {'readonly': True},
        'contains_target': {'readonly': True},
        'referential_constraint': {'readonly': True},
        'property_kind': {'readonly': True},
        'type': {'readonly': True},
        'declaring_type': {'readonly': True},
        'name': {'readonly': True},
    }

    _attribute_map = {
        'partner': {'key': 'partner', 'type': 'IEdmNavigationProperty'},
        'on_delete': {'key': 'onDelete', 'type': 'str'},
        'contains_target': {'key': 'containsTarget', 'type': 'bool'},
        'referential_constraint': {'key': 'referentialConstraint', 'type': 'IEdmReferentialConstraint'},
        'property_kind': {'key': 'propertyKind', 'type': 'str'},
        'type': {'key': 'type', 'type': 'IEdmTypeReference'},
        'declaring_type': {'key': 'declaringType', 'type': 'IEdmStructuredType'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(IEdmNavigationProperty, self).__init__(**kwargs)
        self.partner = None
        self.on_delete = None
        self.contains_target = None
        self.referential_constraint = None
        self.property_kind = None
        self.type = None
        self.declaring_type = None
        self.name = None


class IEdmNavigationPropertyBinding(msrest.serialization.Model):
    """IEdmNavigationPropertyBinding.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar navigation_property:
    :vartype navigation_property: ~azure_migrate_hub.models.IEdmNavigationProperty
    :ivar target:
    :vartype target: ~azure_migrate_hub.models.IEdmNavigationSource
    :ivar path:
    :vartype path: ~azure_migrate_hub.models.IEdmPathExpression
    """

    _validation = {
        'navigation_property': {'readonly': True},
        'target': {'readonly': True},
        'path': {'readonly': True},
    }

    _attribute_map = {
        'navigation_property': {'key': 'navigationProperty', 'type': 'IEdmNavigationProperty'},
        'target': {'key': 'target', 'type': 'IEdmNavigationSource'},
        'path': {'key': 'path', 'type': 'IEdmPathExpression'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(IEdmNavigationPropertyBinding, self).__init__(**kwargs)
        self.navigation_property = None
        self.target = None
        self.path = None


class IEdmNavigationSource(msrest.serialization.Model):
    """IEdmNavigationSource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar navigation_property_bindings:
    :vartype navigation_property_bindings:
     list[~azure_migrate_hub.models.IEdmNavigationPropertyBinding]
    :ivar path:
    :vartype path: ~azure_migrate_hub.models.IEdmPathExpression
    :ivar type:
    :vartype type: ~azure_migrate_hub.models.IEdmType
    :ivar name:
    :vartype name: str
    """

    _validation = {
        'navigation_property_bindings': {'readonly': True},
        'path': {'readonly': True},
        'type': {'readonly': True},
        'name': {'readonly': True},
    }

    _attribute_map = {
        'navigation_property_bindings': {'key': 'navigationPropertyBindings', 'type': '[IEdmNavigationPropertyBinding]'},
        'path': {'key': 'path', 'type': 'IEdmPathExpression'},
        'type': {'key': 'type', 'type': 'IEdmType'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(IEdmNavigationSource, self).__init__(**kwargs)
        self.navigation_property_bindings = None
        self.path = None
        self.type = None
        self.name = None


class IEdmPathExpression(msrest.serialization.Model):
    """IEdmPathExpression.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar path_segments:
    :vartype path_segments: list[str]
    :ivar path:
    :vartype path: str
    :ivar expression_kind:  Possible values include: 'None', 'BinaryConstant', 'BooleanConstant',
     'DateTimeOffsetConstant', 'DecimalConstant', 'FloatingConstant', 'GuidConstant',
     'IntegerConstant', 'StringConstant', 'DurationConstant', 'Null', 'Record', 'Collection',
     'Path', 'If', 'Cast', 'IsType', 'FunctionApplication', 'LabeledExpressionReference', 'Labeled',
     'PropertyPath', 'NavigationPropertyPath', 'DateConstant', 'TimeOfDayConstant', 'EnumMember',
     'AnnotationPath'.
    :vartype expression_kind: str or ~azure_migrate_hub.models.IEdmPathExpressionKind
    """

    _validation = {
        'path_segments': {'readonly': True},
        'path': {'readonly': True},
        'expression_kind': {'readonly': True},
    }

    _attribute_map = {
        'path_segments': {'key': 'pathSegments', 'type': '[str]'},
        'path': {'key': 'path', 'type': 'str'},
        'expression_kind': {'key': 'expressionKind', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(IEdmPathExpression, self).__init__(**kwargs)
        self.path_segments = None
        self.path = None
        self.expression_kind = None


class IEdmProperty(msrest.serialization.Model):
    """IEdmProperty.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar property_kind:  Possible values include: 'None', 'Structural', 'Navigation'.
    :vartype property_kind: str or ~azure_migrate_hub.models.IEdmPropertyKind
    :ivar type:
    :vartype type: ~azure_migrate_hub.models.IEdmTypeReference
    :ivar declaring_type:
    :vartype declaring_type: ~azure_migrate_hub.models.IEdmStructuredType
    :ivar name:
    :vartype name: str
    """

    _validation = {
        'property_kind': {'readonly': True},
        'type': {'readonly': True},
        'declaring_type': {'readonly': True},
        'name': {'readonly': True},
    }

    _attribute_map = {
        'property_kind': {'key': 'propertyKind', 'type': 'str'},
        'type': {'key': 'type', 'type': 'IEdmTypeReference'},
        'declaring_type': {'key': 'declaringType', 'type': 'IEdmStructuredType'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(IEdmProperty, self).__init__(**kwargs)
        self.property_kind = None
        self.type = None
        self.declaring_type = None
        self.name = None


class IEdmReferentialConstraint(msrest.serialization.Model):
    """IEdmReferentialConstraint.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar property_pairs:
    :vartype property_pairs: list[~azure_migrate_hub.models.EdmReferentialConstraintPropertyPair]
    """

    _validation = {
        'property_pairs': {'readonly': True},
    }

    _attribute_map = {
        'property_pairs': {'key': 'propertyPairs', 'type': '[EdmReferentialConstraintPropertyPair]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(IEdmReferentialConstraint, self).__init__(**kwargs)
        self.property_pairs = None


class IEdmSchemaElement(msrest.serialization.Model):
    """IEdmSchemaElement.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar schema_element_kind:  Possible values include: 'None', 'TypeDefinition', 'Term',
     'Action', 'EntityContainer', 'Function'.
    :vartype schema_element_kind: str or ~azure_migrate_hub.models.IEdmSchemaElementKind
    :ivar namespace:
    :vartype namespace: str
    :ivar name:
    :vartype name: str
    """

    _validation = {
        'schema_element_kind': {'readonly': True},
        'namespace': {'readonly': True},
        'name': {'readonly': True},
    }

    _attribute_map = {
        'schema_element_kind': {'key': 'schemaElementKind', 'type': 'str'},
        'namespace': {'key': 'namespace', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(IEdmSchemaElement, self).__init__(**kwargs)
        self.schema_element_kind = None
        self.namespace = None
        self.name = None


class IEdmStructuralProperty(msrest.serialization.Model):
    """IEdmStructuralProperty.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar default_value_string:
    :vartype default_value_string: str
    :ivar property_kind:  Possible values include: 'None', 'Structural', 'Navigation'.
    :vartype property_kind: str or ~azure_migrate_hub.models.IEdmStructuralPropertyKind
    :ivar type:
    :vartype type: ~azure_migrate_hub.models.IEdmTypeReference
    :ivar declaring_type:
    :vartype declaring_type: ~azure_migrate_hub.models.IEdmStructuredType
    :ivar name:
    :vartype name: str
    """

    _validation = {
        'default_value_string': {'readonly': True},
        'property_kind': {'readonly': True},
        'type': {'readonly': True},
        'declaring_type': {'readonly': True},
        'name': {'readonly': True},
    }

    _attribute_map = {
        'default_value_string': {'key': 'defaultValueString', 'type': 'str'},
        'property_kind': {'key': 'propertyKind', 'type': 'str'},
        'type': {'key': 'type', 'type': 'IEdmTypeReference'},
        'declaring_type': {'key': 'declaringType', 'type': 'IEdmStructuredType'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(IEdmStructuralProperty, self).__init__(**kwargs)
        self.default_value_string = None
        self.property_kind = None
        self.type = None
        self.declaring_type = None
        self.name = None


class IEdmStructuredType(msrest.serialization.Model):
    """IEdmStructuredType.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar is_abstract:
    :vartype is_abstract: bool
    :ivar is_open:
    :vartype is_open: bool
    :ivar base_type:
    :vartype base_type: ~azure_migrate_hub.models.IEdmStructuredType
    :ivar declared_properties:
    :vartype declared_properties: list[~azure_migrate_hub.models.IEdmProperty]
    :ivar type_kind:  Possible values include: 'None', 'Primitive', 'Entity', 'Complex',
     'Collection', 'EntityReference', 'Enum', 'TypeDefinition', 'Untyped', 'Path'.
    :vartype type_kind: str or ~azure_migrate_hub.models.IEdmStructuredTypeKind
    """

    _validation = {
        'is_abstract': {'readonly': True},
        'is_open': {'readonly': True},
        'base_type': {'readonly': True},
        'declared_properties': {'readonly': True},
        'type_kind': {'readonly': True},
    }

    _attribute_map = {
        'is_abstract': {'key': 'isAbstract', 'type': 'bool'},
        'is_open': {'key': 'isOpen', 'type': 'bool'},
        'base_type': {'key': 'baseType', 'type': 'IEdmStructuredType'},
        'declared_properties': {'key': 'declaredProperties', 'type': '[IEdmProperty]'},
        'type_kind': {'key': 'typeKind', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(IEdmStructuredType, self).__init__(**kwargs)
        self.is_abstract = None
        self.is_open = None
        self.base_type = None
        self.declared_properties = None
        self.type_kind = None


class IEdmTerm(msrest.serialization.Model):
    """IEdmTerm.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type:
    :vartype type: ~azure_migrate_hub.models.IEdmTypeReference
    :ivar applies_to:
    :vartype applies_to: str
    :ivar default_value:
    :vartype default_value: str
    :ivar schema_element_kind:  Possible values include: 'None', 'TypeDefinition', 'Term',
     'Action', 'EntityContainer', 'Function'.
    :vartype schema_element_kind: str or ~azure_migrate_hub.models.IEdmTermSchemaElementKind
    :ivar namespace:
    :vartype namespace: str
    :ivar name:
    :vartype name: str
    """

    _validation = {
        'type': {'readonly': True},
        'applies_to': {'readonly': True},
        'default_value': {'readonly': True},
        'schema_element_kind': {'readonly': True},
        'namespace': {'readonly': True},
        'name': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'IEdmTypeReference'},
        'applies_to': {'key': 'appliesTo', 'type': 'str'},
        'default_value': {'key': 'defaultValue', 'type': 'str'},
        'schema_element_kind': {'key': 'schemaElementKind', 'type': 'str'},
        'namespace': {'key': 'namespace', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(IEdmTerm, self).__init__(**kwargs)
        self.type = None
        self.applies_to = None
        self.default_value = None
        self.schema_element_kind = None
        self.namespace = None
        self.name = None


class IEdmType(msrest.serialization.Model):
    """IEdmType.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type_kind:  Possible values include: 'None', 'Primitive', 'Entity', 'Complex',
     'Collection', 'EntityReference', 'Enum', 'TypeDefinition', 'Untyped', 'Path'.
    :vartype type_kind: str or ~azure_migrate_hub.models.IEdmTypeKind
    """

    _validation = {
        'type_kind': {'readonly': True},
    }

    _attribute_map = {
        'type_kind': {'key': 'typeKind', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(IEdmType, self).__init__(**kwargs)
        self.type_kind = None


class IEdmTypeReference(msrest.serialization.Model):
    """IEdmTypeReference.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar is_nullable:
    :vartype is_nullable: bool
    :ivar definition:
    :vartype definition: ~azure_migrate_hub.models.IEdmType
    """

    _validation = {
        'is_nullable': {'readonly': True},
        'definition': {'readonly': True},
    }

    _attribute_map = {
        'is_nullable': {'key': 'isNullable', 'type': 'bool'},
        'definition': {'key': 'definition', 'type': 'IEdmType'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(IEdmTypeReference, self).__init__(**kwargs)
        self.is_nullable = None
        self.definition = None


class IEdmVocabularyAnnotation(msrest.serialization.Model):
    """IEdmVocabularyAnnotation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar qualifier:
    :vartype qualifier: str
    :ivar term:
    :vartype term: ~azure_migrate_hub.models.IEdmTerm
    :ivar target: Any object.
    :vartype target: object
    :ivar value:
    :vartype value: ~azure_migrate_hub.models.IEdmExpression
    """

    _validation = {
        'qualifier': {'readonly': True},
        'term': {'readonly': True},
        'target': {'readonly': True},
        'value': {'readonly': True},
    }

    _attribute_map = {
        'qualifier': {'key': 'qualifier', 'type': 'str'},
        'term': {'key': 'term', 'type': 'IEdmTerm'},
        'target': {'key': 'target', 'type': 'object'},
        'value': {'key': 'value', 'type': 'IEdmExpression'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(IEdmVocabularyAnnotation, self).__init__(**kwargs)
        self.qualifier = None
        self.term = None
        self.target = None
        self.value = None


class Machine(msrest.serialization.Model):
    """Machine REST resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Gets or sets the relative URL to get to this REST resource.
    :type id: str
    :param name: Gets or sets the name of this REST resource.
    :type name: str
    :ivar type: Gets the type of this REST resource.
    :vartype type: str
    :param properties: Gets or sets the properties of the machine.
    :type properties: ~azure_migrate_hub.models.MachineProperties
    """

    _validation = {
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'MachineProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Machine, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.type = None
        self.properties = kwargs.get('properties', None)


class MachineCollection(msrest.serialization.Model):
    """Collection of machines.

    :param value: Gets or sets the machines.
    :type value: list[~azure_migrate_hub.models.Machine]
    :param next_link: Gets or sets the value of nextLink.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Machine]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MachineCollection, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class MachineMigrateEventProperties(MigrateEventProperties):
    """Properties of the machine error resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar instance_type: Gets the Instance type.Constant filled by server.
    :vartype instance_type: str
    :param error_code: Gets or sets the error code.
    :type error_code: str
    :param error_message: Gets or sets the error message.
    :type error_message: str
    :param recommendation: Gets or sets the recommendation for the error.
    :type recommendation: str
    :param possible_causes: Gets or sets the possible causes for the error.
    :type possible_causes: str
    :param solution: Gets or sets the solution for which the error is being reported.
    :type solution: str
    :param client_request_id: Gets or sets the client request Id of the payload for which the event
     is being reported.
    :type client_request_id: str
    :param machine: Gets or sets the machine for which the error is being reported.
    :type machine: str
    """

    _validation = {
        'instance_type': {'readonly': True},
    }

    _attribute_map = {
        'instance_type': {'key': 'instanceType', 'type': 'str'},
        'error_code': {'key': 'errorCode', 'type': 'str'},
        'error_message': {'key': 'errorMessage', 'type': 'str'},
        'recommendation': {'key': 'recommendation', 'type': 'str'},
        'possible_causes': {'key': 'possibleCauses', 'type': 'str'},
        'solution': {'key': 'solution', 'type': 'str'},
        'client_request_id': {'key': 'clientRequestId', 'type': 'str'},
        'machine': {'key': 'machine', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MachineMigrateEventProperties, self).__init__(**kwargs)
        self.instance_type = None
        self.machine = kwargs.get('machine', None)


class MachineProperties(msrest.serialization.Model):
    """Properties of the machine resource.

    :param discovery_data: Gets or sets the discovery details of the machine published by various
     sources.
    :type discovery_data: list[~azure_migrate_hub.models.DiscoveryDetails]
    :param assessment_data: Gets or sets the assessment details of the machine published by various
     sources.
    :type assessment_data: list[~azure_migrate_hub.models.AssessmentDetails]
    :param migration_data: Gets or sets the migration details of the machine published by various
     sources.
    :type migration_data: list[~azure_migrate_hub.models.MigrationDetails]
    :param last_updated_time: Gets or sets the time of the last modification of the machine.
    :type last_updated_time: ~datetime.datetime
    """

    _attribute_map = {
        'discovery_data': {'key': 'discoveryData', 'type': '[DiscoveryDetails]'},
        'assessment_data': {'key': 'assessmentData', 'type': '[AssessmentDetails]'},
        'migration_data': {'key': 'migrationData', 'type': '[MigrationDetails]'},
        'last_updated_time': {'key': 'lastUpdatedTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MachineProperties, self).__init__(**kwargs)
        self.discovery_data = kwargs.get('discovery_data', None)
        self.assessment_data = kwargs.get('assessment_data', None)
        self.migration_data = kwargs.get('migration_data', None)
        self.last_updated_time = kwargs.get('last_updated_time', None)


class MigrateEvent(msrest.serialization.Model):
    """MigrateEvent REST resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Gets or sets the relative URL to get to this REST resource.
    :type id: str
    :param name: Gets or sets the name of this REST resource.
    :type name: str
    :ivar type: Gets the type of this REST resource.
    :vartype type: str
    :param properties: Gets or sets the properties of the event.
    :type properties: ~azure_migrate_hub.models.MigrateEventProperties
    """

    _validation = {
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'MigrateEventProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MigrateEvent, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.type = None
        self.properties = kwargs.get('properties', None)


class MigrateProject(msrest.serialization.Model):
    """Migrate Project REST Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param e_tag: Gets or sets the eTag for concurrency control.
    :type e_tag: str
    :param location: Gets or sets the Azure location in which migrate project is created.
    :type location: str
    :param properties: Gets or sets the nested properties.
    :type properties: ~azure_migrate_hub.models.MigrateProjectProperties
    :ivar id: Gets the relative URL to get this migrate project.
    :vartype id: str
    :ivar name: Gets the name of the migrate project.
    :vartype name: str
    :ivar type: Handled by resource provider. Type = Microsoft.Migrate/MigrateProject.
    :vartype type: str
    :param tags: A set of tags. Gets or sets the tags.
    :type tags: ~azure_migrate_hub.models.MigrateProjectTags
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'MigrateProjectProperties'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': 'MigrateProjectTags'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MigrateProject, self).__init__(**kwargs)
        self.e_tag = kwargs.get('e_tag', None)
        self.location = kwargs.get('location', None)
        self.properties = kwargs.get('properties', None)
        self.id = None
        self.name = None
        self.type = None
        self.tags = kwargs.get('tags', None)


class MigrateProjectProperties(msrest.serialization.Model):
    """Class for migrate project properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param registered_tools: Gets or sets the list of tools registered with the migrate project.
    :type registered_tools: list[str or
     ~azure_migrate_hub.models.MigrateProjectPropertiesRegisteredToolsItem]
    :ivar summary: Gets the summary of the migrate project.
    :vartype summary: dict[str, ~azure_migrate_hub.models.ProjectSummary]
    :ivar last_summary_refreshed_time: Gets the last time the project summary was refreshed.
    :vartype last_summary_refreshed_time: ~datetime.datetime
    :ivar refresh_summary_state: Gets the refresh summary state. Possible values include:
     'Started', 'InProgress', 'Completed', 'Failed'.
    :vartype refresh_summary_state: str or
     ~azure_migrate_hub.models.MigrateProjectPropertiesRefreshSummaryState
    :param provisioning_state: Provisioning state of the migrate project. Possible values include:
     'Accepted', 'Creating', 'Deleting', 'Failed', 'Moving', 'Succeeded'.
    :type provisioning_state: str or ~azure_migrate_hub.models.ProvisioningState
    """

    _validation = {
        'summary': {'readonly': True},
        'last_summary_refreshed_time': {'readonly': True},
        'refresh_summary_state': {'readonly': True},
    }

    _attribute_map = {
        'registered_tools': {'key': 'registeredTools', 'type': '[str]'},
        'summary': {'key': 'summary', 'type': '{ProjectSummary}'},
        'last_summary_refreshed_time': {'key': 'lastSummaryRefreshedTime', 'type': 'iso-8601'},
        'refresh_summary_state': {'key': 'refreshSummaryState', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MigrateProjectProperties, self).__init__(**kwargs)
        self.registered_tools = kwargs.get('registered_tools', None)
        self.summary = None
        self.last_summary_refreshed_time = None
        self.refresh_summary_state = None
        self.provisioning_state = kwargs.get('provisioning_state', None)


class MigrateProjectTags(msrest.serialization.Model):
    """Gets or sets the tags.

    :param additional_properties:
    :type additional_properties: str
    """

    _attribute_map = {
        'additional_properties': {'key': 'additionalProperties', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MigrateProjectTags, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)


class MigrationDetails(msrest.serialization.Model):
    """Migration properties that can be shared by various publishers.

    :param migration_phase: Gets or sets the phase of migration of the machine.
    :type migration_phase: str
    :param migration_tested: Gets or sets a value indicating whether migration was tested on the
     machine.
    :type migration_tested: bool
    :param replication_progress_percentage: Gets or sets the progress percentage of migration on
     the machine.
    :type replication_progress_percentage: int
    :param target_vm_arm_id: Gets or sets the ARM id the migrated VM.
    :type target_vm_arm_id: str
    :param enqueue_time: Gets or sets the time the message was enqueued.
    :type enqueue_time: str
    :param solution_name: Gets or sets the name of the solution that sent the data.
    :type solution_name: str
    :param machine_id: Gets or sets the unique identifier of the machine.
    :type machine_id: str
    :param machine_manager_id: Gets or sets the unique identifier of the virtual machine
     manager(vCenter/VMM).
    :type machine_manager_id: str
    :param fabric_type: Gets or sets the fabric type.
    :type fabric_type: str
    :param last_updated_time: Gets or sets the time of the last modification of the machine
     details.
    :type last_updated_time: ~datetime.datetime
    :param machine_name: Gets or sets the name of the machine.
    :type machine_name: str
    :param ip_addresses: Gets or sets the list of IP addresses of the machine. IP addresses could
     be IP V4 or IP V6.
    :type ip_addresses: list[str]
    :param fqdn: Gets or sets the FQDN of the machine.
    :type fqdn: str
    :param bios_id: Gets or sets the BIOS ID of the machine.
    :type bios_id: str
    :param mac_addresses: Gets or sets the list of MAC addresses of the machine.
    :type mac_addresses: list[str]
    :param extended_info: Gets or sets the ISV specific extended information.
    :type extended_info: dict[str, str]
    """

    _attribute_map = {
        'migration_phase': {'key': 'migrationPhase', 'type': 'str'},
        'migration_tested': {'key': 'migrationTested', 'type': 'bool'},
        'replication_progress_percentage': {'key': 'replicationProgressPercentage', 'type': 'int'},
        'target_vm_arm_id': {'key': 'targetVMArmId', 'type': 'str'},
        'enqueue_time': {'key': 'enqueueTime', 'type': 'str'},
        'solution_name': {'key': 'solutionName', 'type': 'str'},
        'machine_id': {'key': 'machineId', 'type': 'str'},
        'machine_manager_id': {'key': 'machineManagerId', 'type': 'str'},
        'fabric_type': {'key': 'fabricType', 'type': 'str'},
        'last_updated_time': {'key': 'lastUpdatedTime', 'type': 'iso-8601'},
        'machine_name': {'key': 'machineName', 'type': 'str'},
        'ip_addresses': {'key': 'ipAddresses', 'type': '[str]'},
        'fqdn': {'key': 'fqdn', 'type': 'str'},
        'bios_id': {'key': 'biosId', 'type': 'str'},
        'mac_addresses': {'key': 'macAddresses', 'type': '[str]'},
        'extended_info': {'key': 'extendedInfo', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MigrationDetails, self).__init__(**kwargs)
        self.migration_phase = kwargs.get('migration_phase', None)
        self.migration_tested = kwargs.get('migration_tested', None)
        self.replication_progress_percentage = kwargs.get('replication_progress_percentage', None)
        self.target_vm_arm_id = kwargs.get('target_vm_arm_id', None)
        self.enqueue_time = kwargs.get('enqueue_time', None)
        self.solution_name = kwargs.get('solution_name', None)
        self.machine_id = kwargs.get('machine_id', None)
        self.machine_manager_id = kwargs.get('machine_manager_id', None)
        self.fabric_type = kwargs.get('fabric_type', None)
        self.last_updated_time = kwargs.get('last_updated_time', None)
        self.machine_name = kwargs.get('machine_name', None)
        self.ip_addresses = kwargs.get('ip_addresses', None)
        self.fqdn = kwargs.get('fqdn', None)
        self.bios_id = kwargs.get('bios_id', None)
        self.mac_addresses = kwargs.get('mac_addresses', None)
        self.extended_info = kwargs.get('extended_info', None)


class ODataPath(msrest.serialization.Model):
    """ODataPath.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar edm_type:
    :vartype edm_type: ~azure_migrate_hub.models.IEdmType
    :ivar navigation_source:
    :vartype navigation_source: ~azure_migrate_hub.models.IEdmNavigationSource
    :ivar segments:
    :vartype segments: list[~azure_migrate_hub.models.ODataPathSegment]
    :ivar path_template:
    :vartype path_template: str
    :ivar path:
    :vartype path: list[~azure_migrate_hub.models.ODataPathSegment]
    """

    _validation = {
        'edm_type': {'readonly': True},
        'navigation_source': {'readonly': True},
        'segments': {'readonly': True},
        'path_template': {'readonly': True},
        'path': {'readonly': True},
    }

    _attribute_map = {
        'edm_type': {'key': 'edmType', 'type': 'IEdmType'},
        'navigation_source': {'key': 'navigationSource', 'type': 'IEdmNavigationSource'},
        'segments': {'key': 'segments', 'type': '[ODataPathSegment]'},
        'path_template': {'key': 'pathTemplate', 'type': 'str'},
        'path': {'key': 'path', 'type': '[ODataPathSegment]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ODataPath, self).__init__(**kwargs)
        self.edm_type = None
        self.navigation_source = None
        self.segments = None
        self.path_template = None
        self.path = None


class ODataPathSegment(msrest.serialization.Model):
    """ODataPathSegment.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar edm_type:
    :vartype edm_type: ~azure_migrate_hub.models.IEdmType
    :param identifier:
    :type identifier: str
    """

    _validation = {
        'edm_type': {'readonly': True},
    }

    _attribute_map = {
        'edm_type': {'key': 'edmType', 'type': 'IEdmType'},
        'identifier': {'key': 'identifier', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ODataPathSegment, self).__init__(**kwargs)
        self.edm_type = None
        self.identifier = kwargs.get('identifier', None)


class ODataQueryContext(msrest.serialization.Model):
    """ODataQueryContext.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar default_query_settings:
    :vartype default_query_settings: ~azure_migrate_hub.models.DefaultQuerySettings
    :ivar model:
    :vartype model: ~azure_migrate_hub.models.IEdmModel
    :ivar element_type:
    :vartype element_type: ~azure_migrate_hub.models.IEdmType
    :ivar navigation_source:
    :vartype navigation_source: ~azure_migrate_hub.models.IEdmNavigationSource
    :ivar element_clr_type:
    :vartype element_clr_type: str
    :ivar path:
    :vartype path: ~azure_migrate_hub.models.ODataPath
    :ivar request_container: Any object.
    :vartype request_container: object
    """

    _validation = {
        'default_query_settings': {'readonly': True},
        'model': {'readonly': True},
        'element_type': {'readonly': True},
        'navigation_source': {'readonly': True},
        'element_clr_type': {'readonly': True},
        'path': {'readonly': True},
        'request_container': {'readonly': True},
    }

    _attribute_map = {
        'default_query_settings': {'key': 'defaultQuerySettings', 'type': 'DefaultQuerySettings'},
        'model': {'key': 'model', 'type': 'IEdmModel'},
        'element_type': {'key': 'elementType', 'type': 'IEdmType'},
        'navigation_source': {'key': 'navigationSource', 'type': 'IEdmNavigationSource'},
        'element_clr_type': {'key': 'elementClrType', 'type': 'str'},
        'path': {'key': 'path', 'type': 'ODataPath'},
        'request_container': {'key': 'requestContainer', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ODataQueryContext, self).__init__(**kwargs)
        self.default_query_settings = None
        self.model = None
        self.element_type = None
        self.navigation_source = None
        self.element_clr_type = None
        self.path = None
        self.request_container = None


class ODataQueryOptions1(msrest.serialization.Model):
    """ODataQueryOptions1.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar filter:
    :vartype filter: ~azure_migrate_hub.models.FilterQueryOption
    """

    _validation = {
        'filter': {'readonly': True},
    }

    _attribute_map = {
        'filter': {'key': 'filter', 'type': 'FilterQueryOption'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ODataQueryOptions1, self).__init__(**kwargs)
        self.filter = None


class ODataRawQueryOptions(msrest.serialization.Model):
    """ODataRawQueryOptions.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar filter:
    :vartype filter: str
    """

    _validation = {
        'filter': {'readonly': True},
    }

    _attribute_map = {
        'filter': {'key': 'filter', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ODataRawQueryOptions, self).__init__(**kwargs)
        self.filter = None


class Operation(msrest.serialization.Model):
    """A REST API operation supported by the provider.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Name of the operation.
    :vartype name: str
    :param display: Displayable properties of the operation.
    :type display: ~azure_migrate_hub.models.OperationDisplay
    :ivar origin: Origin of the operation.
    :vartype origin: str
    """

    _validation = {
        'name': {'readonly': True},
        'origin': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'origin': {'key': 'origin', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Operation, self).__init__(**kwargs)
        self.name = None
        self.display = kwargs.get('display', None)
        self.origin = None


class OperationDisplay(msrest.serialization.Model):
    """Displayable properties of the operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: Provider of the operation.
    :vartype provider: str
    :ivar resource: Resource operated on by the operation.
    :vartype resource: str
    :ivar operation: Operation Type.
    :vartype operation: str
    :ivar description: Description of the operation.
    :vartype description: str
    """

    _validation = {
        'provider': {'readonly': True},
        'resource': {'readonly': True},
        'operation': {'readonly': True},
        'description': {'readonly': True},
    }

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationResultList(msrest.serialization.Model):
    """List of API operations.

    :param value: List of operations.
    :type value: list[~azure_migrate_hub.models.Operation]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Operation]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OperationResultList, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class RangeVariable(msrest.serialization.Model):
    """RangeVariable.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name:
    :vartype name: str
    :ivar type_reference:
    :vartype type_reference: ~azure_migrate_hub.models.IEdmTypeReference
    :ivar kind:
    :vartype kind: int
    """

    _validation = {
        'name': {'readonly': True},
        'type_reference': {'readonly': True},
        'kind': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type_reference': {'key': 'typeReference', 'type': 'IEdmTypeReference'},
        'kind': {'key': 'kind', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(RangeVariable, self).__init__(**kwargs)
        self.name = None
        self.type_reference = None
        self.kind = None


class RefreshSummaryInput(msrest.serialization.Model):
    """Class representing the refresh summary input.

    :param goal: Gets or sets the goal for which summary needs to be refreshed. Possible values
     include: 'Servers', 'Databases'.
    :type goal: str or ~azure_migrate_hub.models.RefreshSummaryInputGoal
    """

    _attribute_map = {
        'goal': {'key': 'goal', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(RefreshSummaryInput, self).__init__(**kwargs)
        self.goal = kwargs.get('goal', None)


class RefreshSummaryResult(msrest.serialization.Model):
    """Class representing the refresh summary status of the migrate project.

    :param is_refreshed: Gets or sets a value indicating whether the migrate project summary is
     refreshed.
    :type is_refreshed: bool
    """

    _attribute_map = {
        'is_refreshed': {'key': 'isRefreshed', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(RefreshSummaryResult, self).__init__(**kwargs)
        self.is_refreshed = kwargs.get('is_refreshed', None)


class RegisterToolInput(msrest.serialization.Model):
    """Class representing the register tool input.

    :param tool: Gets or sets the tool to be registered. Possible values include:
     'ServerDiscovery', 'ServerAssessment', 'ServerMigration', 'Cloudamize', 'Turbonomic', 'Zerto',
     'CorentTech', 'ServerAssessmentV1', 'ServerMigration_Replication', 'Carbonite',
     'DataMigrationAssistant', 'DatabaseMigrationService'.
    :type tool: str or ~azure_migrate_hub.models.RegisterToolInputTool
    """

    _attribute_map = {
        'tool': {'key': 'tool', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(RegisterToolInput, self).__init__(**kwargs)
        self.tool = kwargs.get('tool', None)


class RegistrationResult(msrest.serialization.Model):
    """Class representing the registration status of a tool with the migrate project.

    :param is_registered: Gets or sets a value indicating whether the tool is registered or not.
    :type is_registered: bool
    """

    _attribute_map = {
        'is_registered': {'key': 'isRegistered', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(RegistrationResult, self).__init__(**kwargs)
        self.is_registered = kwargs.get('is_registered', None)


class SelectExpandClause(msrest.serialization.Model):
    """SelectExpandClause.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar selected_items:
    :vartype selected_items: list[object]
    :ivar all_selected:
    :vartype all_selected: bool
    """

    _validation = {
        'selected_items': {'readonly': True},
        'all_selected': {'readonly': True},
    }

    _attribute_map = {
        'selected_items': {'key': 'selectedItems', 'type': '[object]'},
        'all_selected': {'key': 'allSelected', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SelectExpandClause, self).__init__(**kwargs)
        self.selected_items = None
        self.all_selected = None


class ServersProjectSummary(ProjectSummary):
    """Class representing the servers project summary.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar instance_type: Gets the Instance type.Constant filled by server.
    :vartype instance_type: str
    :param refresh_summary_state: Gets or sets the state of refresh summary. Possible values
     include: 'Started', 'InProgress', 'Completed', 'Failed'.
    :type refresh_summary_state: str or ~azure_migrate_hub.models.ProjectSummaryRefreshSummaryState
    :param last_summary_refreshed_time: Gets or sets the time when summary was last refreshed.
    :type last_summary_refreshed_time: ~datetime.datetime
    :param extended_summary: Gets or sets the extended summary.
    :type extended_summary: dict[str, str]
    :param discovered_count: Gets or sets the count of entities discovered.
    :type discovered_count: int
    :param assessed_count: Gets or sets the count of entities assessed.
    :type assessed_count: int
    :param replicating_count: Gets or sets the count of entities being replicated.
    :type replicating_count: int
    :param test_migrated_count: Gets or sets the count of entities test migrated.
    :type test_migrated_count: int
    :param migrated_count: Gets or sets the count of entities migrated.
    :type migrated_count: int
    """

    _validation = {
        'instance_type': {'readonly': True},
    }

    _attribute_map = {
        'instance_type': {'key': 'instanceType', 'type': 'str'},
        'refresh_summary_state': {'key': 'refreshSummaryState', 'type': 'str'},
        'last_summary_refreshed_time': {'key': 'lastSummaryRefreshedTime', 'type': 'iso-8601'},
        'extended_summary': {'key': 'extendedSummary', 'type': '{str}'},
        'discovered_count': {'key': 'discoveredCount', 'type': 'int'},
        'assessed_count': {'key': 'assessedCount', 'type': 'int'},
        'replicating_count': {'key': 'replicatingCount', 'type': 'int'},
        'test_migrated_count': {'key': 'testMigratedCount', 'type': 'int'},
        'migrated_count': {'key': 'migratedCount', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ServersProjectSummary, self).__init__(**kwargs)
        self.instance_type = None
        self.discovered_count = kwargs.get('discovered_count', None)
        self.assessed_count = kwargs.get('assessed_count', None)
        self.replicating_count = kwargs.get('replicating_count', None)
        self.test_migrated_count = kwargs.get('test_migrated_count', None)
        self.migrated_count = kwargs.get('migrated_count', None)


class ServersSolutionSummary(SolutionSummary):
    """Class representing the servers solution summary.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar instance_type: Gets the Instance type.Constant filled by server.
    :vartype instance_type: str
    :param discovered_count: Gets or sets the count of servers discovered.
    :type discovered_count: int
    :param assessed_count: Gets or sets the count of servers assessed.
    :type assessed_count: int
    :param replicating_count: Gets or sets the count of servers being replicated.
    :type replicating_count: int
    :param test_migrated_count: Gets or sets the count of servers test migrated.
    :type test_migrated_count: int
    :param migrated_count: Gets or sets the count of servers migrated.
    :type migrated_count: int
    """

    _validation = {
        'instance_type': {'readonly': True},
    }

    _attribute_map = {
        'instance_type': {'key': 'instanceType', 'type': 'str'},
        'discovered_count': {'key': 'discoveredCount', 'type': 'int'},
        'assessed_count': {'key': 'assessedCount', 'type': 'int'},
        'replicating_count': {'key': 'replicatingCount', 'type': 'int'},
        'test_migrated_count': {'key': 'testMigratedCount', 'type': 'int'},
        'migrated_count': {'key': 'migratedCount', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ServersSolutionSummary, self).__init__(**kwargs)
        self.instance_type = None
        self.discovered_count = kwargs.get('discovered_count', None)
        self.assessed_count = kwargs.get('assessed_count', None)
        self.replicating_count = kwargs.get('replicating_count', None)
        self.test_migrated_count = kwargs.get('test_migrated_count', None)
        self.migrated_count = kwargs.get('migrated_count', None)


class SingleValueNode(msrest.serialization.Model):
    """SingleValueNode.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type_reference:
    :vartype type_reference: ~azure_migrate_hub.models.IEdmTypeReference
    :ivar kind:  Possible values include: 'None', 'Constant', 'Convert',
     'NonResourceRangeVariableReference', 'BinaryOperator', 'UnaryOperator',
     'SingleValuePropertyAccess', 'CollectionPropertyAccess', 'SingleValueFunctionCall', 'Any',
     'CollectionNavigationNode', 'SingleNavigationNode', 'SingleValueOpenPropertyAccess',
     'SingleResourceCast', 'All', 'CollectionResourceCast', 'ResourceRangeVariableReference',
     'SingleResourceFunctionCall', 'CollectionFunctionCall', 'CollectionResourceFunctionCall',
     'NamedFunctionParameter', 'ParameterAlias', 'EntitySet', 'KeyLookup', 'SearchTerm',
     'CollectionOpenPropertyAccess', 'CollectionComplexNode', 'SingleComplexNode', 'Count',
     'SingleValueCast', 'CollectionPropertyNode', 'AggregatedCollectionPropertyNode', 'In',
     'CollectionConstant'.
    :vartype kind: str or ~azure_migrate_hub.models.SingleValueNodeKind
    """

    _validation = {
        'type_reference': {'readonly': True},
        'kind': {'readonly': True},
    }

    _attribute_map = {
        'type_reference': {'key': 'typeReference', 'type': 'IEdmTypeReference'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SingleValueNode, self).__init__(**kwargs)
        self.type_reference = None
        self.kind = None


class Solution(msrest.serialization.Model):
    """Solution REST Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Gets the relative URL to get to this REST resource.
    :vartype id: str
    :ivar name: Gets the name of this REST resource.
    :vartype name: str
    :ivar type: Gets the type of this REST resource.
    :vartype type: str
    :param etag: Gets or sets the ETAG for optimistic concurrency control.
    :type etag: str
    :param properties: Gets or sets the properties of the solution.
    :type properties: ~azure_migrate_hub.models.SolutionProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'SolutionProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Solution, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.etag = kwargs.get('etag', None)
        self.properties = kwargs.get('properties', None)


class SolutionConfig(msrest.serialization.Model):
    """Class representing the config for the solution in the migrate project.

    :param publisher_sas_uri: Gets or sets the publisher sas uri for the solution.
    :type publisher_sas_uri: str
    """

    _attribute_map = {
        'publisher_sas_uri': {'key': 'publisherSasUri', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SolutionConfig, self).__init__(**kwargs)
        self.publisher_sas_uri = kwargs.get('publisher_sas_uri', None)


class SolutionDetails(msrest.serialization.Model):
    """Class representing the details of the solution.

    :param group_count: Gets or sets the count of groups reported by the solution.
    :type group_count: int
    :param assessment_count: Gets or sets the count of assessments reported by the solution.
    :type assessment_count: int
    :param extended_details: Gets or sets the extended details reported by the solution.
    :type extended_details: dict[str, str]
    """

    _attribute_map = {
        'group_count': {'key': 'groupCount', 'type': 'int'},
        'assessment_count': {'key': 'assessmentCount', 'type': 'int'},
        'extended_details': {'key': 'extendedDetails', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SolutionDetails, self).__init__(**kwargs)
        self.group_count = kwargs.get('group_count', None)
        self.assessment_count = kwargs.get('assessment_count', None)
        self.extended_details = kwargs.get('extended_details', None)


class SolutionProperties(msrest.serialization.Model):
    """Class for solution properties.

    :param tool: Gets or sets the tool being used in the solution. Possible values include:
     'ServerDiscovery', 'ServerAssessment', 'ServerMigration', 'Cloudamize', 'Turbonomic', 'Zerto',
     'CorentTech', 'ServerAssessmentV1', 'ServerMigration_Replication', 'Carbonite',
     'DataMigrationAssistant', 'DatabaseMigrationService'.
    :type tool: str or ~azure_migrate_hub.models.SolutionPropertiesTool
    :param purpose: Gets or sets the purpose of the solution. Possible values include: 'Discovery',
     'Assessment', 'Migration'.
    :type purpose: str or ~azure_migrate_hub.models.SolutionPropertiesPurpose
    :param goal: Gets or sets the goal of the solution. Possible values include: 'Servers',
     'Databases'.
    :type goal: str or ~azure_migrate_hub.models.SolutionPropertiesGoal
    :param status: Gets or sets the current status of the solution. Possible values include:
     'Inactive', 'Active'.
    :type status: str or ~azure_migrate_hub.models.SolutionPropertiesStatus
    :param cleanup_state: Gets or sets the cleanup state of the solution. Possible values include:
     'None', 'Started', 'InProgress', 'Completed', 'Failed'.
    :type cleanup_state: str or ~azure_migrate_hub.models.SolutionPropertiesCleanupState
    :param summary: Gets or sets the summary of the solution.
    :type summary: ~azure_migrate_hub.models.SolutionSummary
    :param details: Gets or sets the details of the solution.
    :type details: ~azure_migrate_hub.models.SolutionDetails
    """

    _attribute_map = {
        'tool': {'key': 'tool', 'type': 'str'},
        'purpose': {'key': 'purpose', 'type': 'str'},
        'goal': {'key': 'goal', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'cleanup_state': {'key': 'cleanupState', 'type': 'str'},
        'summary': {'key': 'summary', 'type': 'SolutionSummary'},
        'details': {'key': 'details', 'type': 'SolutionDetails'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SolutionProperties, self).__init__(**kwargs)
        self.tool = kwargs.get('tool', None)
        self.purpose = kwargs.get('purpose', None)
        self.goal = kwargs.get('goal', None)
        self.status = kwargs.get('status', None)
        self.cleanup_state = kwargs.get('cleanup_state', None)
        self.summary = kwargs.get('summary', None)
        self.details = kwargs.get('details', None)


class SolutionsCollection(msrest.serialization.Model):
    """Collection of solutions.

    :param value: Gets or sets the list of solutions.
    :type value: list[~azure_migrate_hub.models.Solution]
    :param next_link: Gets or sets the value of next link.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Solution]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SolutionsCollection, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class TransformationNode(msrest.serialization.Model):
    """TransformationNode.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar kind:  Possible values include: 'Aggregate', 'GroupBy', 'Filter', 'Compute'.
    :vartype kind: str or ~azure_migrate_hub.models.TransformationNodeKind
    """

    _validation = {
        'kind': {'readonly': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TransformationNode, self).__init__(**kwargs)
        self.kind = None
